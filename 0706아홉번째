집합 연산자

  집합연산자는 조회(SELECT) 쿼리의 결과를 대상으로 연산을 수행하는 연산자이다.
  Oracle 데이터베이스에서는 UNION, UNION ALL, INTERSECT, MINUS등을 제공한다.
  TABLE1                  TABLE2
+=================+     +===================+
|                 |     |                   |
|  1, 1, 1, 2, 3  |     |  3, 3, 4, 5 1, 1  |
|                 |     |                   |
+=================+     +===================+

  UNION: 테이블에 연결된 SELECT 문의 결괏값을 합집합으로 합친다. 중복된 행은 제거되서 출력된다.
    . 1, 2, 3, 4, 5

  UNION ALL: 테이블에 연결된 SELECT 문의 결괏값을 합집합으로 합친다. 중복된 행은 모두 출력된다.
    . 1, 1, 1, 2, 3, 3, 3, 4, 5, 1, 1
  
  INTERSECT: 테이블에 연결된 첫 번째 SELECT 문의 결괏값과 두 번째 SELECT 문의 결괏값을 교집합으로 처리한다. 중복된 행은 제거되서 출력된다.
    . 1, 3
  
  MINUS: 테이블에 연결된 첫 번째 SELECT 문의 결괏값과 두 번째 SELECT 문의 결괏값을 차집합으로 처리한다. 중복된 행은 제거되서 출력된다.
    . 2

    ○ 컬럼의 개수가 다르면 오류, 개수는 같지만 데이터 타입이 다를경우 에러 발생

            ※ 나중에 한번 찾아보기(SQL INJECTION -> SQLi)  시큐어 코딩 숙지 ※ 

 다중행 함수와 데이터 그룹화
  다중행 함수(aggregate functions, multiple row function)는 여러 행을 그룹화하 하나의 결과를 계산하는 함수이다. 
  이러한 함수는 주로 SELECT 문의 SELECT 절 또는 HAVING 절에서 사용되며 집계된 결과를 반환한다. 주요 

    자주 사용하는 다중행 함수
      . SUM  : 지정한 데이터의 합을 반환하는 함수
      . COUNT: 지정한 데이터의 개수를 반환하는 함수 
      . MAX  : 지정한 데이터 중 최댓값을 반환하는 함수
      . MIN  : 지정한 데이터 중 최솟값을 반환하는 함수
      . AVG  : 지정한 데이터의 평균값을 반환하는 함수

   합계를 구하는 SUM 함수
   형식: SUM([1] 2) --> [] 표시는 생략가능
   1. DISTINCT, ALL 중 하나를 선택하거나 아무 값도 지정하지 않는다. (선택)
     . DISTINCT: 중복된 데이터는 제외한다.
     . ALL: 전체 데이터(중복 허용), 생략하면 ALL이 기본값이다.
   2. 합계를 구할 컬럼(열)명, 연산자, 함수를 사용한 데이터 (필수)

  SELECT DEPTNO, SUM(SAL) FROM EMP; 이런식으로 하면 에러 발생 왜나하면 DEPTNO가 여러개 이기 때문
  이런 식으로 
  GROUP BY 절은 여러 데이터에서 의미있는 하나의 결과를 그룹화(특정 컬럼(열) 값별로 묶는다.)해서 출력할 때 사용한다.
  SQL> SELECT DEPTNO, SUM(SAL) FROM EMP GROUP BY DEPTNO; 


 데이터 개수를 구하는 COUNT 함수
 형식: COUNT([1] 2) --> [] 표시는 생략가능
 1. DISTINCT, ALL 중 하나를 선택하거나 아무 값도 지정하지 않는다. (선택)
   . DISTINCT: 중복된 데이터는 제외한다.
   . ALL: 전체 데이터(중복 허용), 생략하면 ALL이 기본값이다.
 2. 개수를 구할 컬럼(열)명, 연산자, 함수를 사용한 데이터 (필수)
   . COUNT()함수에 *을 넣어서 COUNT(*)로 사용하면 SELECT문의 결과 값으로 나온 행 데이터의 개수를 반환한다.
   . COUNT() 함수를 사용하면 추가수당(COMM) 컬럼이 NULL인 데이터는 반환 개수에서 제외된다.

 최댓값을 구하는 MAX 함수
 형식: MAX([1] 2) --> [] 표시는 생략가능
 1. DISTINCT, ALL 중 하나를 선택하거나 아무 값도 지정하지 않는다. (선택)
   . DISTINCT: 중복된 데이터는 제외한다.
   . ALL: 전체 데이터(중복 허용), 생략하면 ALL이 기본값이다.
 2. 개수를 구할 컬럼(열)명, 연산자, 함수를 사용한 데이터 (필수)
   . MAX()함수를 사용하면 입력 데이터중 최댓값을 반환한다.


 최솟값을 구하는 MIN 함수
 형식: MIN([1] 2)
 1. DISTINCT, ALL 중 하나를 선택하거나 아무 값도 지정하지 않는다. (선택)
   . DISTINCT: 중복된 데이터는 제외한다.
   . ALL: 전체 데이터(중복 허용), 생략하면 ALL이 기본값이다.
 2. 개수를 구할 컬럼(열)명, 연산자, 함수를 사용한 데이터 (필수)
   . MIN()함수를 사용하면 입력 데이터중 최솟값을 반환한다.

 평균값을 구하는 AVG 함수
 형식: AVG([1] 2)
 1. DISTINCT, ALL 중 하나를 선택하거나 아무 값도 지정하지 않는다. (선택)
   . DISTINCT: 중복된 데이터는 제외한다.
   . ALL: 전체 데이터(중복 허용), 생략하면 ALL이 기본값이다.
 2. 개수를 구할 컬럼(열)명, 연산자, 함수를 사용한 데이터 (필수)
   . AVG()함수는 입력 데이터의 평균 값을 구해서 반환한다.
   . 숫자 or 숫자로 암시적 형 변환이 가능한 데이터만 사용할 수 있다.
   . 반올림을 하고 싶으면 CEIL(AVG(..))라 쓴다.
작성 순서 
  SELECT   [조회할 열 이름1], [조회할 열 이름2], ...
  FROM     [조회할 테이블 이름]
  WHERE    [조회할 행을 선별하는 조건식]
  GROUP BY [그룹화할 열을 지정(여러 개 지정 가능)]
  ORDER BY [정렬하려는 열 지정(여러 개 지정 가능)];

합과 평균을 구할때 GROUP BY를 사용하면 SQL문을 간략하게 쓸수있다

 실습.
 각 부서의 직책별 평균 급여를 구하되 그 평균 급여가 2000 이상인 그룹만 출력한다.
 GROUP BY절과 HAVING절을 사용한다.
  SELECT DEPTNO, JOB, AVG(SAL)
    FROM EMP
    GROUP BY DEPTNO, JOB
    HAVING AVG(SAL) >= 2000
    ORDER BY DEPTNO, JOB;


서브쿼리
  o 서브쿼리
    SQL문을 실행하는 데 필요한 데이터를 추가로 조회하기 위해서 SQL문 내부에서 사용하는 SELECT문을 말한다.
    - 메인쿼리: 서브쿼리의 결과 값을 받아서 기능을 수행하는 영역
    - 서브쿼리: 메인쿼리 내부에 기술하는 쿼리
      사용 형식:
      SELECT 컬럼명
          FROM 테이블명
          WHERE 조건식 ( SELECT 컬럼명
                             FROM 테이블명
                             WHERE 조건식 );
      
      첫 번째 SELECT문: 메인쿼리
      두 번째 SELECT문: 서브쿼리

o 서브쿼리의 특징
  . 서브쿼리는 연산자와 같은 비교 또는 조회 대상의 오른쪽에 놓이며 괄호()로 묶어서 사용한다.
  . 특수한 몇몇 경우를 제외한 대부분의 서브쿼리에서는 ORDER BY절을 사용할 수 없다.
  . 서브쿼리의 SELECT절에 명시한 컬럼(열)은 메인쿼리의 비교 대상과 같은 자료형과 같은 개수로 지정해야 한다. 
    메인쿼리의 비교 대상 데이터가 하나라면 서브쿼리의 SELECT절 역시 같은 자료형인 열을 하나 지정해야 한다.
  . 서브쿼리에 있는 SELECT문의 결과 행 수는 함께 사용하는 메인쿼리의 연산자 종류와 호환 가능해야 한다. 
    예를 들어 메인쿼리에 사용한 연산자가 단 하나의 데이터로만 연산이 가능한 연산자라면 서브쿼리의 결과 행 수는 반드시 하나여야 한다.

o 단일행 서브쿼리(Single-row Subquery)
- 실행 결과가 하나의 행으로 나오는 쿼리일 때 사용한다.

o 단일행 연산자
- 단일행 연산자를 사용할 땐 같은 데이터가 여러 개 존재하는 컬럼(열)을 주의해야 한다.
>	크다(초과)
<   작다(미만)
>=	크거나 같다(이상)
<=  작거나 같다(이하)
=   같다
<>	같지 않다
!=  같지 않다
^=	같지 않다
 
o 다중행 서브쿼리
- 실행 결과가 여러 개의 행으로 나오는 쿼리일 때 사용한다.
- 단일행 서브쿼리와 다르게 서브쿼리 결과가 여러개이므로 단일행 연산자는 사용할 수 없고 다중행 연산자를 사용해야 메인쿼리와 비교할 수 있다.

o 다중행 연산자
IN	       메인쿼리의 데이터가 서브쿼리의 결과 중 하나라도 일치한 데이터가 있다면 true
ANY, SOME  메인쿼리의 조건식을 만족하는 서브쿼리의 결과가 하나 이상이면 true
ALL	       메인쿼리의 조건식을 서브쿼리의 결과 모두가 만족하면 true
EXISTS     서브쿼리의 결과가 존재하면(즉, 행이 1개 이상일 경우) true

단일행 연산자의 경우 여러 개 존재하는 컬럼이 있으면 오류가 생긴다.
