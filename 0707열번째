트랜잭션(Transaction)
  - 한꺼번에 수행되어야 할 최소 작업 단위
  - 논리적 작업 단위(LUX, Logical Units of Work)
  - 모든 작업은 반드시 한꺼번에 완료가 되야 하며 그렇지 않은 경우에는 한꺼번에 취소되어야 함
  - 사용자가 시스템에 요구를 시작하여 시스템 내의 처리, 시스템에서 사용자에게 응답하는 모든 처리를 포함
  - 트랜잭션에 의해서 관리되는 명령어 : DML(INSERT, UPDATE, DELETE)

트랜잭션 기술적 요건(ACID)
  o 원자성(Atomicity)
    - 분리 할 수 없는 하나의 단위로 작업은 모두 완료되거나 모두 취소되어야 함
    - 트랜잭션의 처리가 취소된 경우 전혀 이루어지지 않은 것과 같아야 함
    - 작업 중 에러가 발생되면 rollback(되돌리기)
  o 일관성(Consistency)
    - 트랜잭션들간의 영향이 한 방향으로만 전달되어야 함
    - 오류 없이 유효한 데이터만 저장되어야 함
  o 고립성(Isolation)
    - 트랜잭션이 완료되기 전까지 다른 트랜잭션에 영향을 주어선 안됨
    - 접근하고 있는 데이터는 다른 트랜잭션으로부터 격리 되어야 함
  o 영구성(Durability)
    - 트랜잭션이 완료된 경우 다른 시스템 고장이나 네트워크 장애 등으로 데이터가 유실되지 않고 정상적으로 기록되어야 함
    - 작업이 완료되면 commit(적용)

트랜잭션 SQL
  o COMMIT
    - 트랜잭션 작업이 정상 완료되었으므로 변경 내용을 영구적으로 적용한다.
    - 모든 SAVEPOINT는 삭제된다.
  o ROLLBACK
    - 트랜잭션 작업을 모두 취소하고 최근 COMMIT 시점으로 이동한다.
  o ROLLBACK to <SAVEPOINT명>
    - 지정된 SAVEPOINT 까지의 트랜잭션 작업을 취소하고 SAVEPOINT 시점으로 이동한다.
  o SAVEPOINT <SAVEPOINT명>
    - 현재 트랜잭션 작업 시점에 이름 지정한다.
    - 하나의 트랜잭션 안에서 여러 구역을 나눌 때 사용한다.

    COMMIT   : 보류중인 모든 데이터의 변경사항을 영구적으로 적용하고 현재 트랜잭션을 종료한다. --> 작업 완료
    ROLLBACK : 보류중인 모든 데이터의 변경사항을 폐기하고 현재 트랜잭션을 종료하고 이전의 COMMIT 이후 단계로 되돌아 간다.  --> 작업 취소
    SAVEPOINT : 책갈피
    DDL 명령어를 입력하는 순간 AUTO COMMIT 됨 (CREATE, ALTER, DROP, RENAME, COMMENT, TRUNCATE)

PL/SQL
  - SQL을 확장한 절차적 언어(Procedural Language)이다.  
  - 관계형 데이터베이스에서 사용되는 Oracle의 표준 데이터 엑세스 언어로, 프로시저 생성자를 SQL과 완벽하게 통합한다. 
  - 유저 프로세스가 PL/SQL 블록을 보내면, 서버 프로세서는 PL/SQL Engine에서 해당 블록을 받고 SQL과 Procedural를 나눠서 SQL은 SQL Statement Executer로 보낸다. 
  - PL/SQL 프로그램의 종류는 크게 Procedure, Function, Trigger 로 나뉘어 진다. 
  - 오라클에서 지원하는 프로그래밍 언어의 특성을 수용하여 SQL에서는 사용할수없는 절차적 프로그래밍 기능을 가지고 있어 SQL의 단점을 보완하였다.
  장점 
    - 프로시저 생성자와 SQL의 통합 
    - 성능 향상 : 잘 만들어진 PL/SQL 명령문이라는 가정하에 좋아진다. 
    - 모듈식 프로그램 개발 가능 : 논리적인 작업 을 진행하는 여러 명령어들을 하나의 블록을 만들 수 있다. 
    - 이식성이 좋다 - 예외 처리 가능 => 또한 SQL의 다음 단점을 해결 가능하다.
    1) 변수가 없다.
    2) 한번에 하나의 명령문만 사용 가능하기 떄문에 트래픽이 상대적으로 증가한다.
    3) 제어문이 사용 불가. (IF, LOOP)
    4) 예외처리가 없다. 등등

기본 특징
  - 블록 단위의 실행을 제공한다. 이를 위해 BEGIN과 END;를 사용한다. 그리고 마지막 라인에 /를 입력하면 해당 블록이 실행된다. 
  - 변수, 상수 등을 선언하여 SQL과 절차형 언어에서 사용 
  - 변수의 선언은 DECLARE절에서만 가능하다. 그리고 BEGIN 섹션에서 새 값이 할당될 수 있다. 
  - IF문을 사용하여 조건에 따라 문장들을 분기 가능 
  - LOOP문을 사용하여 일련의 문장을 반복 가능 
  - 커서를 사용하여 여러 행을 검색 및 처리 
  - [ PL/SQL에서 사용 가능한 SQL은 Query, DML, TCL이다. ] DDL (CREATE, DROP, ALTER, TRUNCATE …), DCL (GRANT, REVOKE) 명령어는 동적 SQL을 이용할 때만 사용 가능하다. 
  - [ PL/SQL의 SELECT문은 해당 SELECT의 결과를 PL/SQL Engine으로 보낸다. ]
    이를 캐치하기 위한 변수를 DECLARE 해야 하고, INTO 절을 꼭 선언하여 넣을 변수를 꼭 표현해주어야 
    SELECT 문장은 반드시 한 개의 행이 검색되어야 한다.   
    그리고 이를 INTO절을 꼭 사용해야한다. 또한 검색되는 행이 없으면 문제가 발생한다.

기본 PL/SQL Block 구조 
  DECLARE(선언부) 옵션 (생략가능)
    - PL/SQL에서 사용하는 모든 변수나 상수를 선언하는 부분으로서 DECLARE로 시작=> 변수/상수/커서 등 을 선언 
  BEGIN (실행부) 필수 (반드시 써야한다.)
    - 절차적 형식으로 SQL문을 실행할 수 있도록 절차적 언어의 요소인 제어문, 반복문, 함수 정의 등 로직을 기술할수있는 부분이며 BEGIN으로 시작
  EXCEPTION (예외 처리부) 옵션 (생략 가능)
    - PL/SQL문이 실행되는 중에 에러가 발생할 수 있는데 이를 예외 사항이라고 한다.
    - 이러한 예외 사항이 발생했을때 이를 해결하기 위한 문장을 기술할수있는 부분
  END; (실행문 종료) 필수 (반드시 써야한다.)

PL/SQL Block의 종류
  - 익명 블록 : 이름이 없는 PL/SQL Block을 말한다.
  - 이름 있는 블록 : DB의 객체로 저장되는 블록이 있다. 
  - 프로시저 : 리턴 값이 없거나 하나 이상 가질 수 있는 프로그램을 말한다. 
  - 함수 : 리턴 값을 반드시 반환해야 하는 프로그램을 말한다. 
  - 패키지 : 하나 이상의 프로시저, 함수, 변수, 예외 등의 묶음을 말한다. 
  - 트리거 : 지정된 이벤트가 발생하면 자동으로 실행되는 PL/SQL 블록이다.

PL/SQL 프로그램의 작성 요령 
  - PL/SQL블록 내에서는 한 문장이 종료할때마다 세미콜론(;)을 사용하여 한 문장이 끝났다는것을 명시 
  - END 뒤에 세미콜론( ; )을 사용하여 하나의 블록이 끝났다는 것을 명시 
  - 단일행 주석은 -- 이고 여러 행 주석은 /* */입니다. 
  - 쿼리문을 수행하기 위해서 '/'가 반드시 입력되어야 하며, PL/SQL 블록은 행에 '/'가 있으면 종결된 것으로 간주.
    [참고] 오라클에서 화면 출력을 위해서는 PUT_LINE이란 프로시저를 이용  
  - DBMS_OUTPUT.PUT_LINE(출력할 내용) 같이 사용.  
  - 위 프로시저를 사용하여 출력되는 내용을 화면에 보여주기 위해서는 환경 변수 SERVEROUTPUT(디폴트값이 OFF이므로) 
    ON으로 변경. 
  - SET serveroutput ON 
  EX) SET SERVEROUTPUT ON --> OFF를 바꿔주기 위해 한번만 해주면 된다.
      BEGIN
          DBMS_OUTPUT.PUT_LINE('HELLO ORACLE!'); ---> 가로안에 들어간것을 출력해줌
      END;
      / 
      이렇게 입력하면 HELLO ORACLE! 이라고 출력해준다.

  - 변수에 값을 저장하기 위해서 := 를 사용한다.
  - 변수명 자료형 := 값 or 표현식
  EX) DECLARE
      V_NO NUMBER(2);  --> 자료형 선언
      BEGIN
      V_NO := 10; ---> 10 값을 넣어준다
      DBMS_OUTPUT.PUT_LINE(V_NO); --. V_NO를 출력 
      END;
      /

  EX) DECLARE
        V_STR VARCHAR2(100); --> 자료형 선언
      BEGIN                                          -------- (1)
        V_STR := 'HELLO ORACLE!';
    ============= OR =======================
      DECLARE
        V_STR VARCHAR2(100) := 'HELLO ORACLE!';      -------- (2)   값을 넣어주는 방식 2가지임  
      BEGIN
    ==========================================
        DBMS_OUTPUT.PUT_LINE(V_STR);
      EXCEPTION WHEN OTHERS THEN --> 만약 에러가 발생할 시 밑에 것을 출력해줌
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
      END;
      /
      
  EX) DBMS_OUTPUT.PUT_LINE('V_EMPNO: ' || V_EMPNO);--> 이런식으로 ||을 써줘야 V_EMPNO : (V_EMPNO 의 값) 으로 출력해준다.

상수 
  - 상수란 저장한 값이 프로그램이 종료할 때 까지 값이 변경이 안된다.
  - 상수 형식: 변수명 CONSTANT 자료형 := 값 or 표현
  EX) DECLARE
        V_EMPNO CONSTANT NUMBER(4) := 7708; --> 상수는 변수를 선언할 때 초기화한다.
      BEGIN
        DBMS_OUTPUT.PUT_LINE('V_EMPNO: ' || V_EMPNO);  -- V_EMPNO: 7708
    
        -- V_EMPNO := 2022;  --> 상수이므로 값을 변경할 수 없다. 주석을 빼면 에러가 발생한다. --> 초기화한 이후에는 상수는 값이 변경이 안된다.
        DBMS_OUTPUT.PUT_LINE('V_EMPNO: ' || V_EMPNO);  -- V_EMPNO: 7708
      END;
      /
변수의 기본값 설정하기
  - 변수의 기본값을 설정하기 위해서는 DEFAULT 키워드를 사용한다.
  - 형식:
  - 변수명 자료형 DEFAULT 값 OR 표현식
  EX) DECLARE
        V_DEPTNO NUMBER(2) DEFAULT 10;
      BEGIN
        DBMS_OUTPUT.PUT_LINE('V_DEPTNO : ' || V_DEPTNO);
      END;
      /
변수에 NULL 값 저장 허용하지 않기
  - 변수에 NULL 값을 저장하지 않게 하려면 NOT NULL 키워드를 사용한다.
  - 형식: 변수명 자료형 NOT NULL := 값 OR 표현식
  EX) DECLARE
        V_DEPTNO NUMBER(2) NOT NULL := 10;
      -- V_DEPTNO NUMBER(2);  
      BEGIN
          DBMS_OUTPUT.PUT_LINE('NULL을 금지한다.'); 
          -- DBMS_OUTPUT.PUT_LINE('V_DEPTNO: ' || V_DEPTNO);  -- V_DEPTNO: 10
      END;
/

변수의 자료형
  스칼라형 
    - 숫자 NUMBER: 소수점을 포함하는 숫자 데이터(최대 38자리)
    - 문자열 CHAR: 고정 길이 문자열 데이터(최대 32,767)
    - 문자열 VARCHAR2: 가변 길이 문자열 데이터(최대 32,767)
    - 날짜 DATE
    - 논리 데이터 BOOLEAN: PL/SQL에서만 사용할 수 있는 논리 자료형으로 true, false, NULL을 포함한다.
    - e.g.) V_DEPTNO NUMBER(4);
    
  참조형
    - 데이터베이스에 존재하는 특정 테이블의 열의 자료형을 참조하는 자료형
    - %TYPE: 컬럼(열)을 참조할 때 사용
    - %ROWTYPE: 행을 참조할 때 사용
    - 형식: 변수명 테이블명.컬럼명%TYPE;
    - e.g.) V_DEPTNO DEPT.DEPTNO%TYPE;  -- V_DEPTNO NUMBER(2);
  EX) DECLARE
        V_DEPTNO DEPT.DEPTNO%TYPE;  --> DEPT에 DEPTNO의 자료형과 같은 자료형 할당
        V_DEPT_ROW DEPT%ROWTYPE;
      BEGIN
        SELECT DEPTNO, DNAME, LOC INTO V_DEPT_ROW --> 결과를 V_DEPT_ROW 에다가 집어넣어주는 명령어
          FROM DEPT
          WHERE DEPTNO = 40;
        V_DEPTNO := V_DEPT_ROW.DEPTNO; --> V_DEPT_ROW에 들어있는 DEPTNO를 넣어준다.
        DBMS_OUTPUT.PUT_LINE('V_DEPTNO: ' || V_DEPTNO);  -- V_DEPTNO: 40
        DBMS_OUTPUT.PUT_LINE('DEPTNO: ' || V_DEPT_ROW.DEPTNO);  -- DEPTNO: 40  
        DBMS_OUTPUT.PUT_LINE('DNAME: ' || V_DEPT_ROW.DNAME);  -- DNAME: OPERATIONS
        DBMS_OUTPUT.PUT_LINE('LOC: ' || V_DEPT_ROW.LOC);  -- LOC: BOSTON
      END;
      /


조건 제어문
  - 참과 거짓을 판단해서 실행하는 영역을 구분할 때 사용한다.
  - 단일 IF문 형식:
  IF 조건식 THEN
      명령어;  -- 참일 때 실행
  END IF;
  END;
  /

  - IF ~ ELSE문 형식:
  IF 조건식 THEN
      명령어;  -- 참일 때 실행
  ELSE
      명령어;  -- 거짓일 때 실행
  END IF;
  END;
  /

  - 다중 IF문 형식:
  IF 조건식 THEN
      명령어;  -- 첫 번째 조건식이 참일 때 실행
  ELSIF 조건식 THEN
      명령어;  -- 두 번째 조건식이 참일 때 실행
  ELSIF 조건식 THEN
      명령어;  -- 세 번째 조건식이 참일 때 실행
    :
    :
  ELSE        
      명령어;  -- 모든 조건이 거짓이면 이 부분을 실행
  
  END IF;
  END; 
  /
  EX) DECLARE
          V_SCORE NUMBER := 4; -- 값을 1 ~ 4까지 변경하고 실행한다.
      BEGIN
          -- IF V_SCORE == 1 THEN  -- 에러 SQL에서 같다는 = 을 하나 사용한다.
          IF V_SCORE = 1 THEN
              DBMS_OUTPUT.PUT_LINE('1입니다.');
          ELSIF V_SCORE = 2 THEN
              DBMS_OUTPUT.PUT_LINE('2입니다.');     
          ELSIF V_SCORE = 3 THEN
              DBMS_OUTPUT.PUT_LINE('3입니다.');     
          ELSE
              DBMS_OUTPUT.PUT_LINE('1 ~ 3이 아닙니다.');   ---> ELSE 전체 부분은 생략가능함  
          END IF;
      END;
      /

CASE문
  DECLARE
    v_num INT := 2;
    v_numword CHAR(30);
  BEGIN
    v_numword := 
    CASE v_num
        WHEN 1 THEN '하나'
        WHEN 2 THEN '둘'
        WHEN 3 THEN '셋'
        WHEN 4 THEN '넷'
        ELSE '그외의 값'
  END;
      DBMS_OUTPUT.PUT_LINE(v_numword);
  END; 
  /

반복 제어문 : 명령어를 반복해서 작업을 수행할 때 사용
  기본 LOOP
    형식:
      LOOP
          명령어;  -- 반복을 수행할 작업
      END LOOP;
      
      DECLARE
          V_NO NUMBER := 1;
      BEGIN
          LOOP
              DBMS_OUTPUT.PUT_LINE('V_NO: ' || V_NO);
              V_NO := V_NO + 1;
              -- EXIT WHEN V_NO > 5;
              IF V_NO > 5 THEN
                  EXIT; --> LOOP를 탈출시켜줌
              END IF;
          END LOOP;
      END;
      /
  
  WHILE LOOP
    형식:
      WHILE 조건식 LOOP
          실행문;   -- 반복을 수행할 실행문
      END LOOP;
      
      
      DECLARE
          V_NO NUMBER := 1;
      BEGIN
          WHILE V_NO <= 5 LOOP
              DBMS_OUTPUT.PUT_LINE('V_NO: ' || V_NO);
              V_NO := V_NO + 1;
          END LOOP;
      END;
      /

  FOR LOOP
    형식:
    FOR 변수 IN 시작값 .. 종료값 LOOP
        명령어;  -- 반복을 할 명령어  --->  시작값에서 종료값까지
    END LOOP;
    ============================================
    FOR 변수 IN REVERESE 시작값 .. 종료값 LOOP
        명령어;  -- 반복을 할 명령어          ---> 종료값에서 시작값까지
    END LOOP;

    BEGIN
      FOR i IN 0..4 LOOP [ FOR i IN REVERSE 0..4 LOOP]
          DBMS_OUTPUT.PUT_LINE('i의 값: ' || i);
      END LOOP;
    END;
    /


    DECLARE
        -- %TYPE 속성으로 컬럼 단위 레퍼런스 변수 선언
        -- V_EMPNO 변수는 해당 테이블(EMP)의 해당 컬럼(EMPNO)의 자료형과 크기 그대로 참조해서 정의한다.
        V_EMPNO EMP.EMPNO%TYPE;
        V_EMPNAME EMP.ENAME%TYPE;
    BEGIN
        DBMS_OUTPUT.PUT_LINE('사번 / 이름');
        DBMS_OUTPUT.PUT_LINE('-------------');
        SELECT EMPNO, ENAME INTO V_EMPNO, V_EMPNAME ---> 각각 집어넣는다 의미
               FROM EMP
               WHERE ENAME = 'SCOTT';
    
        -- 레퍼런스 변수에 저장된 값을 출력한다.
        DBMS_OUTPUT.PUT_LINE(V_EMPNO || ' / ' || V_EMPNAME);  -- 7788 / SCOTT
    END;
    /
    
오라클 저장 프로시저(Oracle stored procedure)
  데이터베이스 내에서 실행 가능한 프로그램 단위로 일련의 SQL 문과 제어 구조를 포함하는 데이터베이스 객체이다. 
  저장 프로시저는 일련의 작업을 수행하고 필요한 결과를 반환하는데 사용다.
  
  저장 프로시저는 특정한 작업을 수행하기 위해 필요한 로직과 비즈니스 규칙을 포함할 수 있다. 
  
    . 데이터 조작: 저장 프로시저는 데이터베이스 테이블에 대한 삽입, 갱신, 삭제 등의 작업을 수행할 수 있다. 
      복잡한 데이터 조작 작업을 단일 프로시저로 구현할 수 있으며 데이터 일관성을 유지하고 데이터베이스의 성능을 향상시킬 수 있다.
  
    . 비즈니스 규칙 적용: 저장 프로시저는 비즈니스 규칙을 구현하여 데이터 유효성 검사, 제약 조건 적용 등을 수행할 수 있다. 
      이를 통해 데이터의 일관성과 정확성을 보장할 수 있다.
  
    . 트랜잭션 관리: 저장 프로시저는 복수의 SQL 문을 트랜잭션 단위로 묶을 수 있다. 
      이를 통해 데이터 조작 작업의 원자성을 유지하고, 롤백과 커밋을 관리할 수 있다.
  
    . 성능 향상: 저장 프로시저는 데이터베이스 서버에서 미리 컴파일되고 최적화되어 실행되기 때문에 일반적으로 쿼리보다 더 빠른 성능을 제공할 수 있다. 
      또한 네트워크 트래픽을 감소시키고 재사용 가능한 로직을 한 곳에서 관리할 수 있다.
  
    . 저장 프로시저는 SQL과 PL/SQL(Oracle의 프로시저 언어)을 사용하여 작성된다. 
      SQL 문은 데이터베이스 객체에 대한 조작을 수행하고 PL/SQL은 프로그래밍 구조와 로직을 구현한다. 
      저장 프로시저는 CREATE PROCEDURE 문을 사용하여 생성하고 호출되어 실행된다.
  
    예를 들어, 주문을 처리하는 저장 프로시저를 작성한다면 주문 데이터의 유효성을 검사하고 주문 내역을 업데이트하고 결제 정보를 처리하는 등의 작업을 수행할 수 있다. 
    이를 호출하여 클라이언트 애플리케이션이나 다른 저장 프로시저 등에서 사용할 수 있다.

  - 저장 프로시저(STORED PROCEDURE) 
    - 특정 처리 작업을 한번에 수행할 때 코드를 넣어 놓고 한번에 실행한다.
    - 형식 (파라미터가 없는 프로시저)
      - CREATE [OR REPLACE] PROCEDURE 프로시저명
        IS | AS
            변수 선언부;
        BEGIN
            코드 실행부;
        EXCEPTION
            예외 처리부;
        END [프로시저 이름];
        /
    - 실행 방법 : 1) EXCUTE 프로시저명 --> PL/SQL 블록에서 실행
                 2) BEGIN  --> 익명 블록에서 프로시저를 실행
                      프로시저명;
                    END;
                    /

    - 프로시저 조회하기
    - 이미 저장되어 있는 프로시저를 확인하기 위해서는 USER_SOURCE 데이터 사전을 조회한다. 
    - 컬럼 설명
    - NAME: 서브 프로그램 이름
    - TYPE: 서브 프로그램의 종류(PROCEDURE, FUNCTION)
    - LINE: 서브 프로그램에서 작성한 줄 번호
    - TEXT: 서브 프로그램에서 작성한 소스코드
    SELECT *
        FROM USER_SOURCE
        WHERE NAME = 'PRO_PARAM1';

    - 프로시저 수정하기
    - 프로시저 수정 형식: CREATE OR REPLACE PROCEDURE 프로시저명 으로 재생성한다.
    - SQL Developer 에서는 소스코드를 수정하고 저장하면 다시 컴파일된다.
    
    - 프로시저 삭제하기
    - 프로시저 삭제 형식: DROP PROCEDURE 프로시저명
    - SQL Developer 에서는 프로시저 소스코드를 수정하고 저장하면 다시 컴파일된다.
    
    - 파라미터를 사용하는 프로시저 형식:
    - 파라미터 모드
    - IN: 입력용 매개변수로 프로시저를 호출할 때 입력받는다. (기본값으로 지정하지 않으면 IN으로 설정된다.)
    - OUT: 출력용 매개변수로 호출할 때 값을 반환한다.
    - IN OUT: 입력용/출력용으로 호출할 때 값을 입력받은 후 실행 결과 값을 반환한다.

      CREATE [OR REPLACE] PROCEDURE 프로시저명
       (매개변수명 [IN/OUT/IN OUT] 데이터타입 [ := | DEFAULT 기본값 ] )
      IS | AS
          변수 선언부;
      BEGIN
          코드 실행부;
      EXCEPTION
          예외 처리부;
      END [프로시저 이름];
      /
  
    - IN 모드 파라미터를 이용한 프로시저 생성하기
    - 파라미터(인수,인자)가 있는 경우
    CREATE OR REPLACE PROCEDURE pro_param2
    (
       param1 IN NUMBER,
       param2 NUMBER,
       param3 NUMBER := 3,
       param4 NUMBER DEFAULT 4
    )
    IS
    
    BEGIN
       DBMS_OUTPUT.PUT_LINE('param1 : ' || param1);
       DBMS_OUTPUT.PUT_LINE('param2 : ' || param2);
       DBMS_OUTPUT.PUT_LINE('param3 : ' || param3);
       DBMS_OUTPUT.PUT_LINE('param4 : ' || param4);
    END;
    /
    
    - 실습
    - 생성된 프로시저를 호출한다.
    - 주석을 옆에 기술하면 에러 발생: EXECUTE pro_param2(1,2,10,20); -- 1 2 10 20 
    - 단독으로 실행: EXECUTE pro_param2(1,2,10,20); 
    EXECUTE pro_param2(1,2,10,20); 
    --> 1 2 10 20 
    EXECUTE pro_param2(1,2);  
    --> 1 2 3 4 
    EXECUTE pro_param2(param1 => 10, param2 => 20);  
    --> 10 20 3 4 
    EXECUTE pro_param2(param2 => 200, param1 => 100); 
    --> 100 200 3 4 

    - 실습
    - OUT 모드 파라미터를 이용한 프로시저 생성하기
    - 프로시저 실행 후 호출한 프로그램으로 값을 반환한다.
    - 사원번호를 입력받아서 사원의 이름과 급여를 반환하는 pro_param2 프로시저를 생성한다.
    CREATE OR REPLACE PROCEDURE pro_param3
    (
       in_empno IN EMP.EMPNO%TYPE,
       out_ename OUT EMP.ENAME%TYPE,
       out_sal OUT EMP.SAL%TYPE
    )
    IS
    
    BEGIN
       SELECT ENAME, SAL INTO out_ename, out_sal
         FROM EMP
        WHERE EMPNO = in_empno;
    END pro_param3;
    /
    
    - 실습
    DECLARE
       v_ename EMP.ENAME%TYPE;
       v_sal EMP.SAL%TYPE;
    BEGIN
       pro_param3(7788, v_ename, v_sal);
       DBMS_OUTPUT.PUT_LINE('ENAME : ' || v_ename);
       DBMS_OUTPUT.PUT_LINE('SAL : ' || v_sal);
    END;
    /

    - 함수
    - 저장 함수(STORED FUNCTION) 
    - 특정 처리 작업을 한번에 수행할 때 코드를 넣어 놓고 실행한다.
    - 함수는 반드시 리턴값이 존재해야 한다.
    - 형식:
    CREATE OR REPLACE FUNCTION 함수명(매개변수명 자료형 [, 매개변수명 자료형 ...])
    RETURN 자료형
    IS | AS
        변수 선언부;
    BEGIN
        코드 실행부;
    EXCEPTION
        예외 처리부;
    END;
    /
    
    - 실습
    - 함수의 기능: 사용자의 이름을 입력 받아서 EMP 테이블에서 JOB을 검색해서 출력한다.
    - 리턴값: 
    - - 성공: 직업
    - - 실패: 사원 없음.
    - myfunction 함수 정의
    CREATE OR REPLACE FUNCTION myfunction(name IN VARCHAR2) RETURN VARCHAR2
    IS
        v_job EMP.ename%TYPE;
    
    BEGIN
        SELECT JOB INTO v_job
            FROM EMP 
            WHERE ENAME = name;
        RETURN v_job;
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN -- 사원이 존재하지 않을 경우
        RETURN '사원 없음.';
    
    END myfunction;  
    /


- PL/SQL 에서 myfunction 함수 호출
SET SERVEROUTPUT ON
BEGIN
    DBMS_OUTPUT.PUT_LINE('SCOTT: ' || myfunction('SCOTT'));  -- SCOTT: ANALYST
    DBMS_OUTPUT.PUT_LINE('SMITH: ' || myfunction(UPPER('smith')));  -- SMITH: CLERK
    DBMS_OUTPUT.PUT_LINE('KING: '  || myfunction(UPPER('king')));  -- KING: PRESIDENT
    DBMS_OUTPUT.PUT_LINE('KING: '  || myfunction(UPPER('MrK')));  -- KING: 사원 없음.
END;
/

- SQL에서 myfunction 함수 호출
SELECT * FROM EMP;
SELECT myfunction('SCOTT') FROM DUAL; -- ANALIST
SELECT myfunction(UPPER('smith')) AS 함수호출결과 FROM DUAL; -- CLERK
SELECT myfunction(UPPER('king')) FROM DUAL; -- PRESIDENT
SELECT myfunction(UPPER('MrK')) FROM DUAL; -- 사원 없음
        
